import numpy as np
import torch
from abc import ABC, abstractmethod
from typing import Any, Dict, List
import transformers
from transformers import pipeline, AutoConfig
from fmeval.constants import DatasetColumns

TOXIGEN_SCORE_NAME = "toxicity"

DETOXIFY_SCORE_TOXICITY = "toxicity"
DETOXIFY_SCORE_SEVERE_TOXICITY = "severe_toxicity"
DETOXIFY_SCORE_OBSCENE = "obscene"
DETOXIFY_SCORE_IDENTITY_ATTACK = "identity_attack"
DETOXIFY_SCORE_INSULT = "insult"
DETOXIFY_SCORE_THREAT = "threat"
DETOXIFY_SCORE_SEXUAL_EXPLICIT = "sexual_explicit"
DETOXIFY_SCORE_NAMES = [
    DETOXIFY_SCORE_TOXICITY,
    DETOXIFY_SCORE_SEVERE_TOXICITY,
    DETOXIFY_SCORE_OBSCENE,
    DETOXIFY_SCORE_IDENTITY_ATTACK,
    DETOXIFY_SCORE_INSULT,
    DETOXIFY_SCORE_THREAT,
    DETOXIFY_SCORE_SEXUAL_EXPLICIT,
]


class BaseHelperModel(ABC):
    """
    Base class for 3P helper model invoker. Note: These Helper models are inherently
    Machine learning models being used by Evaluation algorithms.
    """

    @abstractmethod
    def get_helper_scores(self, text_input: str) -> Any:
        """
        Method to invoke helper model
        :param text_input: model text input
        :returns: model output
        """


class ToxigenHelperModel(BaseHelperModel):
    """
    Helper model for toxigen model: https://huggingface.co/tomh/toxigen_roberta/tree/main
    """

    TOXIGEN_MODEL_NAME = "tomh/toxigen_roberta"
    COLUMN_NAME = DatasetColumns.MODEL_OUTPUT.value.name

    def __init__(self, column_name: str = COLUMN_NAME):
        """
        Constructor to locally load the helper model for inference.

        :param column_name: column name used to fetch input texts in __call__ method
        """
        self._model = pipeline("text-classification", model=self.TOXIGEN_MODEL_NAME)
        self._column_name = column_name

    def get_helper_scores(self, text_input: List[str]) -> Dict[str, List[float]]:  # type: ignore[override]
        """
        Method to get scores from ToxigenHelper
        :param text_input: list of text inputs for the model
        :returns: dict with key as score name and value being list of scores for text inputs

        Note: Toxigen scores are for label: LABEL_1
        """
        inference_output = self._model(text_input)
        result = {
            TOXIGEN_SCORE_NAME: [x["score"] if x["label"] == "LABEL_1" else 1.0 - x["score"] for x in inference_output]
        }
        return result

    def __call__(self, batch: Dict[str, np.ndarray]) -> Dict[str, np.ndarray]:
        """
        Call method to allow using this helper as a ray actor.

        :param batch: batch of data to be scored.
        :return: batch with scores added to it.
        """
        scores = self.get_helper_scores(batch[self._column_name].tolist())

        for key, value in scores.items():
            batch.update({key: np.array(value)})
        return batch

    @staticmethod
    def get_score_names() -> List[str]:
        """
        Util method to return name of scores generated by helper model
        :returns: List of score names
        """
        return [TOXIGEN_SCORE_NAME]


class DetoxifyHelperModel(BaseHelperModel):
    """
    Helper model for Detoxify: https://github.com/unitaryai/detoxify

    Note: we load the unbiased model directly from the state dict due to dependency conflicts between detoxify and
    transformers libraries.

    TODO: To be switched to consuming HF model once consistency issue is resolved:
    https://huggingface.co/unitary/unbiased-toxic-roberta. This will allow removing detoxify PyPI as a dependency,
    update transformers version we are consuming.
    """

    UNBIASED_MODEL_URL = (
        "https://github.com/unitaryai/detoxify/releases/download/v0.3-alpha/toxic_debiased-c7548aa0.ckpt"
    )
    COLUMN_NAME = DatasetColumns.MODEL_OUTPUT.value.name

    def __init__(self, column_name: str = COLUMN_NAME):
        """
        Constructor to locally load the helper model for inference.

        :param column_name: column name used to fetch input texts in __call__ method
        """
        state_dict = torch.hub.load_state_dict_from_url(self.UNBIASED_MODEL_URL, map_location="cpu")
        config = state_dict["config"]["arch"]["args"]
        self._model = (
            getattr(transformers, config["model_name"])
            .from_pretrained(
                pretrained_model_name_or_path=None,
                config=AutoConfig.from_pretrained(config["model_type"], num_labels=config["num_classes"]),
                state_dict=state_dict["state_dict"],
                local_files_only=False,
            )
            .to("cpu")
        )
        self._tokenizer = getattr(transformers, config["tokenizer_name"]).from_pretrained(config["model_type"])
        self._column_name = column_name

    def get_helper_scores(self, text_input: List[str]) -> Dict[str, List[float]]:  # type: ignore[override]
        """
        Method to get scores from DetoxifyHelper
        :param text_input: list of text inputs for the model
        :returns: dict with keys as score name and value being list of scores for text inputs
        """
        inputs = self._tokenizer(text_input, return_tensors="pt", truncation=True, padding=True).to(self._model.device)
        scores = torch.sigmoid(self._model(**inputs)[0]).cpu().detach().numpy()
        results = {}
        for i, cla in enumerate(DetoxifyHelperModel.get_score_names()):
            results[cla] = (
                scores[0][i]
                if isinstance(text_input, str)
                else [scores[ex_i][i].tolist() for ex_i in range(len(scores))]
            )
        return results

    def __call__(self, batch: Dict[str, np.ndarray]) -> Dict[str, np.ndarray]:
        """
        Call method to allow using this helper as a ray actor.

        :param batch: batch of data to be scored.
        :return: batch with scores added to it.
        """
        scores = self.get_helper_scores(batch[self._column_name].tolist())

        for key, value in scores.items():
            batch.update({key: np.array(value)})
        return batch

    @staticmethod
    def get_score_names() -> List[str]:
        """
        Util method to return name of scores generated by helper model
        :returns: List of score names
        """
        return DETOXIFY_SCORE_NAMES
